// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0oTD3P42mXp7++8AAAD//xEziUN5QQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
