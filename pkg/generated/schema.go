// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
