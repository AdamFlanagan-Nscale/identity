// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0d7f/38AAAD//zScJ/fjMAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
