// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
